Anagrams
Problem Description

Given an array A of N strings, return all groups of strings that are anagrams.

Represent a group by a list of integers representing the index(1-based) in the original list. Look at the sample case for clarification.

NOTE: Anagram : a word, phrase, or name formed by rearranging the letters of another, such as 'spar', formed from 'rasp'.



Problem Constraints
1 <= N <= 104

1 <= |A[i]| <= 104

Each string consists only of lowercase characters.

Sum of length of all the strings doesn't exceed 107



Input Format
Single Argument A which is an array of strings.



Output Format
Return a two-dimensional array where each row describes a group.

Note:

Ordering of the result :
You should not change the relative ordering of the strings within the group suppose within a group containing A[i] and A[j], A[i] comes before A[j] if i < j.





Example Input
Input 1:

 A = [cat, dog, god, tca]
Input 2:

 A = [rat, tar, art]


Example Output
Output 1:

 [ [1, 4],
   [2, 3] ]
Output 2:

 [ [1, 2, 3] ]


Example Explanation
Explanation 1:

 "cat" and "tca" are anagrams which correspond to index 1 and 4 and "dog" and "god" are another set of anagrams which correspond to index 2 and 3.
 The indices are 1 based ( the first element has index 1 instead of index 0).
Explanation 2:

 All three strings are anagrams.
 
 
 
*/SOLUTION*/
int * anagrams(const char* A, int n1, int *len1, int *len2) {
    
    int*ram=(int*)malloc(sizeof(int)*26);
    int i,j,k;for(i=0;i<26;i++)ram[i]=0;
    char*B=(char)malloc(sizeof(char)*n1);
    
    for(i=0;i<n1;i++){
        B[i]=(char*)malloc(sizeof(char)*(strlen(A[i])+1));
        for(j=0;A[i][j];j++){
            B[i][j]=A[i][j];
            ram[A[i][j]-'a']++;
        }
        B[i][j]='\0';
        k=0;
        for(j=0;j<26;j++){
            while(ram[j]>0)
            {
                B[i][k++]='a'+j;
                ram[j]--;
            }
        }
    }
    int*v=(int*)malloc(sizeof(int)*n1);
    for(i=0;i<n1;i++)v[i]=0;
    for(i=0;i<n1;i++){
        if(v[i]==1)continue;
        v[i]=1;
        printf("[%d ",i+1);
        for(j=i+1;j<n1;j++){
            if(strcmp(B[i],B[j])==0){
                v[j]=1;printf("%d ",j+1);
            }
        }
        printf("] ");
    }
    for(i=0;i<n1;i++)
    free(B[i]);free(B);free(v);
    *len1=*len2=0;return NULL;
}
